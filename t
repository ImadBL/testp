// webpack.config.js
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');

module.exports = {
  mode: process.env.NODE_ENV || 'development',

  entry: './src/index.js', // <- ton fichier d'entrée AngularJS
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.[contenthash].js',
    publicPath: '/',        // important pour devServer + routing
    clean: true,
  },

  plugins: [
    // Copie/ génère l'index principal
    new HtmlWebpackPlugin({
      template: './src/index.html', // contient ton <div ng-app="bpmApp"> etc.
    }),
  ],

  module: {
    rules: [
      // CSS (optionnel)
      { test: /\.css$/i, use: ['style-loader', 'css-loader'] },

      // Assets référencés dans les templates (images, fonts…)
      { test: /\.(png|jpe?g|gif|svg|woff2?|ttf|eot)$/i, type: 'asset' },
    ],
  },
    optimization: {
    splitChunks: {
      chunks: 'all',
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendor',
          priority: -10,
          reuseExistingChunk: true,
        },
      },
    },
    runtimeChunk: 'single',
    minimize: true, // terser par défaut en mode=production
  },
  output: {
    filename: '[name].[contenthash].js',      // ex: main.x.js, vendor.y.js
    chunkFilename: '[name].[contenthash].js', // pour les chunks lazy
  },

performance: {
    hints: 'warning',          // 'error' | 'warning' | false
    maxAssetSize: 600 * 1024,  // 600 KiB
    maxEntrypointSize: 600 * 1024,
  },
  devServer: {
    static: [
      { directory: path.resolve(__dirname, 'dist') }
    ],
    port: 8080,
    historyApiFallback: true, // évite 404 côté routing si html5Mode; sans danger sinon
    hot: true,
  },

  devtool: 'source-map',
};





    "@babel/core": "^7.25.0",
    "@babel/preset-env": "^7.25.0",
    "babel-loader": "^9.2.1",
    "copy-webpack-plugin": "^13.0.1",
    "css-loader": "^7.1.2",
    "glob": "^10.4.5",
    "html-loader": "^3.1.2",
    "html-minifier-terser": "^7.2.0",
    "html-webpack-plugin": "^5.6.3",
    "mini-css-extract-plugin": "^2.9.2",
    "style-loader": "^4.0.0",
    "webpack": "^5.101.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.2"



// scripts/build-templates.js
const fs = require('fs');
const path = require('path');
const glob = require('glob');
const { minify } = require('html-minifier-terser');

// Fichiers HTML à collecter
const GLOBS = ['src/app/**/*.html', 'src/components/**/*.html'];

// Ton module AngularJS
const ANGULAR_MODULE = 'bpmApp';

// Dossiers de travail
const SRC_DIR = path.resolve(__dirname, 'src');
const OUT_DIR = path.resolve(__dirname, 'src/.generated');
const OUT_FILE = path.join(OUT_DIR, 'templates.js');

(async function run() {
  if (!fs.existsSync(OUT_DIR)) fs.mkdirSync(OUT_DIR, { recursive: true });

  const files = GLOBS.flatMap((g) => glob.sync(g, { nodir: true }));

  const puts = [];

  for (const file of files) {
    const raw = fs.readFileSync(file, 'utf8');

    // Minification proche de ta conf Gulp
    const html = await minify(raw, {
      removeComments: true,
      collapseWhitespace: true,
      conservativeCollapse: true,
      keepClosingSlash: true,
      caseSensitive: true,
    });

    // Clé EXACTE attendue par templateUrl:
    const key = path.relative(SRC_DIR, file).replace(/\\/g, '/');

    const safe = html.replace(/`/g, '\\`'); // échappe les backticks
    puts.push("  $templateCache.put('" + key + "', `" + safe + "`);");
  }

  const content =
    "/* AUTO-GENERATED by build-templates.js */\n" +
    "(function () {\n" +
    "  'use strict';\n" +
    "  try { angular.module('" + ANGULAR_MODULE + "'); } catch (e) { angular.module('" + ANGULAR_MODULE + "', []); }\n" +
    "  angular.module('" + ANGULAR_MODULE + "').run(['$templateCache', function ($templateCache) {\n" +
    puts.join('\n') +
    "\n  }]);\n" +
    "})();";

  fs.writeFileSync(OUT_FILE, content, 'utf8');
  console.log("Wrote " + files.length + " templates -> " + OUT_FILE);
})();





